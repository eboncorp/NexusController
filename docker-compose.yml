version: '3.8'

services:
  #########################################
  # NexusController Main Application
  #########################################
  nexus-controller:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-2.0.0}
    container_name: nexus-controller
    hostname: nexus-controller
    ports:
      - "${NEXUS_PORT:-8000}:8000"
    volumes:
      - nexus_data:/app/data
      - nexus_logs:/app/logs
      - nexus_security_reports:/app/security_reports
      - ./config.yaml:/app/config.yaml:ro
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATABASE_URL=postgresql+asyncpg://nexus:${POSTGRES_PASSWORD:-nexus_secure_password}@postgres:5432/nexusdb
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-change-this-in-production}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:8000}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,nexus-controller}
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_ENDPOINT:-http://jaeger:4317}
      - OTEL_SERVICE_NAME=nexuscontroller
      - OTEL_SERVICE_VERSION=2.0.0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:size=100m,noexec,nosuid,nodev
    networks:
      - nexus-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nexus.rule=Host(`nexus.localhost`)"
      - "traefik.http.services.nexus.loadbalancer.server.port=8000"

  #########################################
  # Development Override
  #########################################
  nexus-dev:
    extends: nexus-controller
    build:
      target: development
    container_name: nexus-controller-dev
    volumes:
      - .:/app
      - nexus_dev_data:/app/data
      - nexus_dev_logs:/app/logs
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - DEBUG=true
    ports:
      - "${NEXUS_DEV_PORT:-8001}:8000"
    profiles: ["dev"]
    read_only: false
    healthcheck:
      interval: 10s
      timeout: 5s
      start_period: 10s

  #########################################
  # Database Services
  #########################################
  postgres:
    image: postgres:15-alpine
    container_name: nexus-postgres
    hostname: nexus-postgres
    environment:
      POSTGRES_DB: nexusdb
      POSTGRES_USER: nexus
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nexus_secure_password}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nexus -d nexusdb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:size=100m,noexec,nosuid,nodev
      - /var/run/postgresql:size=100m,noexec,nosuid,nodev
    networks:
      - nexus-network
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  redis:
    image: redis:7-alpine
    container_name: nexus-redis
    hostname: nexus-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:size=50m,noexec,nosuid,nodev
    networks:
      - nexus-network
    command: redis-server /usr/local/etc/redis/redis.conf --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_password}

  #########################################
  # Observability Stack
  #########################################
  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: nexus-jaeger
    hostname: nexus-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=memory
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:14269/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - nexus-network
    profiles: ["observability"]

  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: nexus-prometheus
    hostname: nexus-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/alerts.yml:/etc/prometheus/alerts.yml:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - nexus-network
    profiles: ["observability"]
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

  grafana:
    image: grafana/grafana:10.1.2
    container_name: nexus-grafana
    hostname: nexus-grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_secure_password}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - nexus-network
    profiles: ["observability"]
    depends_on:
      - prometheus

  #########################################
  # Message Queue (Optional)
  #########################################
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: nexus-kafka
    hostname: nexus-kafka
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - nexus-network
    profiles: ["kafka"]

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: nexus-zookeeper
    hostname: nexus-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - nexus-network
    profiles: ["kafka"]

  #########################################
  # Load Balancer (Optional)
  #########################################
  traefik:
    image: traefik:v3.0
    container_name: nexus-traefik
    hostname: nexus-traefik
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./config/dynamic.yml:/etc/traefik/dynamic.yml:ro
      - traefik_certs:/certs
    restart: unless-stopped
    networks:
      - nexus-network
    profiles: ["traefik"]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.dashboard.service=api@internal"

  #########################################
  # Security Scanner (Optional)
  #########################################
  trivy:
    image: aquasec/trivy:latest
    container_name: nexus-trivy
    volumes:
      - trivy_cache:/root/.cache/trivy
      - .:/app:ro
    networks:
      - nexus-network
    profiles: ["security"]
    command: ["fs", "--security-checks", "vuln,secret,config", "/app"]

#########################################
# Volumes
#########################################
volumes:
  nexus_data:
    driver: local
  nexus_logs:
    driver: local
  nexus_security_reports:
    driver: local
  nexus_dev_data:
    driver: local
  nexus_dev_logs:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  traefik_certs:
    driver: local
  trivy_cache:
    driver: local

#########################################
# Networks
#########################################
networks:
  nexus-network:
    driver: bridge
    name: nexus-network
    ipam:
      config:
        - subnet: 172.20.0.0/16